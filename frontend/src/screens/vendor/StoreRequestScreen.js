import React, { useState } from 'react';
import { Form, Button, Row, Col } from 'react-bootstrap';
import { toast } from 'react-toastify';
import axios from 'axios';
import { useStore } from '../../store';
import FormContainer from '../../components/FormContainer';
import { Helmet } from 'react-helmet-async';
import { STORE_CATEGORIES } from '../../constants/storeConstants';

const StoreRequestScreen = () => {
Â  const [name, setName] = useState('');
Â  const [image, setImage] = useState('');
Â  const [category, setCategory] = useState(STORE_CATEGORIES[0]);
Â  const [area, setArea] = useState('');
Â  const [city, setCity] = useState('');
Â  const [district, setDistrict] = useState('');
Â  const [loading, setLoading] = useState(false);
Â  const [loadingUpload, setLoadingUpload] = useState(false);

Â  const { state } = useStore();
Â  const { userInfo } = state;

Â  // Upload Image Handler
Â  const uploadFileHandler = async (e) => {
Â  Â  const file = e.target.files[0];
    if (!file) return;

Â  Â  const formData = new FormData();
Â  Â  formData.append('image', file);
    
    // 1. Reset image state and set loading before network call
    setImage(''); 
Â  Â  setLoadingUpload(true);
    
Â  Â  try {
Â  Â  Â  const config = {
Â  Â  Â  Â  headers: {
Â  Â  Â  Â  Â  'Content-Type': 'multipart/form-data',
Â  Â  Â  Â  Â  Authorization: `Bearer ${userInfo.token}`,
Â  Â  Â  Â  },
Â  Â  Â  };
Â  Â  Â  const { data } = await axios.post('/api/upload', formData, config);
        
      // 2. SUCCESS: Auto-fill the state (and thus the text input) with the URL
Â  Â  Â  setImage(data.image); 
Â  Â  Â  toast.success('Image uploaded and URL filled successfully!');
Â  Â  } catch (err) {
Â  Â  Â  toast.error('Image upload failed.');
Â  Â  Â  e.target.value = null; // Clear file input on failure
Â  Â  } finally {
Â  Â  Â  setLoadingUpload(false);
Â  Â  }
Â  };

Â  // Submit Request Handler (Unchanged)
Â  const submitHandler = async (e) => {
Â  Â  e.preventDefault();
Â  Â  setLoading(true);
    // NOTE: Backend will now enforce if the image is truly required.
Â  Â  try {
Â  Â  Â  await axios.post(
Â  Â  Â  Â  '/api/stores/request',
Â  Â  Â  Â  {
Â  Â  Â  Â  Â  name,
Â  Â  Â  Â  Â  image,
Â  Â  Â  Â  Â  category,
Â  Â  Â  Â  Â  address: { area, city, district },
Â  Â  Â  Â  },
Â  Â  Â  Â  {
Â  Â  Â  Â  Â  headers: { Authorization: `Bearer ${userInfo.token}` },
Â  Â  Â  Â  }
Â  Â  Â  );
Â  Â  Â  toast.success(
Â  Â  Â  Â  'Store creation request sent to Admin successfully! Please wait for approval.'
Â  Â  Â  );
Â  Â  Â  // Reset form
Â  Â  Â  setName('');
Â  Â  Â  setImage('');
Â  Â  Â  setArea('');
Â  Â  Â  setCity('');
Â  Â  Â  setDistrict('');
Â  Â  Â  setCategory(STORE_CATEGORIES[0]); // Reset category to default
Â  Â  } catch (err) {
Â  Â  Â  toast.error(
Â  Â  Â  Â  err.response && err.response.data.message
Â  Â  Â  Â  Â  ? err.response.data.message
Â  Â  Â  Â  Â  : err.message
Â  Â  Â  );
Â  Â  } finally {
Â  Â  Â  setLoading(false);
Â  Â  }
Â  };

Â  return (
Â  Â  <FormContainer>
Â  Â  Â  <Helmet>
Â  Â  Â  Â  <title>Request New Store</title>
Â  Â  Â  </Helmet>
Â  Â  Â  <h1 className="text-center mb-4 text-primary">Request New Store</h1>
Â  Â  Â  <Form onSubmit={submitHandler} className="p-3 border rounded shadow-sm bg-white">
Â  Â  Â  Â  {/* Store Name (Unchanged) */}
Â  Â  Â  Â  <Form.Group className="mb-3" controlId="name">
Â  Â  Â  Â  Â  <Form.Label className="fw-bold">Store Name</Form.Label>
Â  Â  Â  Â  Â  <Form.Control
Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  placeholder="Enter store name"
Â  Â  Â  Â  Â  Â  value={name}
Â  Â  Â  Â  Â  Â  onChange={(e) => setName(e.target.value)}
Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  ></Form.Control>
Â  Â  Â  Â  </Form.Group>

Â  Â  Â  Â  {/* Category (Unchanged) */}
Â  Â  Â  Â  <Form.Group className="mb-3" controlId="category">
Â  Â  Â  Â  Â  <Form.Label className="fw-bold">Category</Form.Label>
Â  Â  Â  Â  Â  <Form.Select
Â  Â  Â  Â  Â  Â  value={category}
Â  Â  Â  Â  Â  Â  onChange={(e) => setCategory(e.target.value)}
Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  {STORE_CATEGORIES.map((cat) => (
Â  Â  Â  Â  Â  Â  Â  <option key={cat} value={cat}>
Â  Â  Â  Â  Â  Â  Â  Â  {cat}
Â  Â  Â  Â  Â  Â  Â  </option>
Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  </Form.Select>
Â  Â  Â  Â  </Form.Group>

Â  Â  Â  Â  {/* ðŸš€ MODIFIED Image Upload Section */}
Â  Â  Â  Â  <Form.Group controlId="image" className="mb-3">
Â  Â  Â  Â  Â  <Form.Label className="fw-bold">Store Image URL</Form.Label>
Â  Â  Â  Â  Â  <Form.Control
Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  placeholder="Enter image URL or upload below"
Â  Â  Â  Â  Â  Â  value={image}
Â  Â  Â  Â  Â  Â  onChange={(e) => setImage(e.target.value)}
Â  Â  Â  Â  Â  Â  // ðŸ›‘ FIX: Removed 'required' attribute to prevent popup error
Â  Â  Â  Â  Â  ></Form.Control>
Â  Â  Â  Â  Â  <Form.Label className="mt-2 text-muted small">Or Upload Image</Form.Label>
Â  Â  Â  Â  Â  <Form.Control
Â  Â  Â  Â  Â  Â  type="file"
Â  Â  Â  Â  Â  Â  onChange={uploadFileHandler}
Â  Â  Â  Â  Â  Â  disabled={loadingUpload}
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  {loadingUpload && <p className="text-info mt-2">Uploading image... Please wait.</p>}
          {/* Show the URL path for confirmation */}
Â  Â  Â  Â  Â  {image && !loadingUpload && <p className="text-success small">Image URL Set: **{image.substring(0, 50)}...**</p>}
Â  Â  Â  Â  </Form.Group>
Â  Â  Â  Â  
Â  Â  Â  Â  {/* Address Fields (Unchanged) */}
Â  Â  Â  Â  <h5 className="mt-4 mb-3 text-secondary">Store Address</h5>
Â  Â  Â  Â  <Row>
Â  Â  Â  Â  Â  <Col md={4}>
Â  Â  Â  Â  Â  Â  <Form.Group className="mb-3" controlId="area">
Â  Â  Â  Â  Â  Â  Â  <Form.Label>Area</Form.Label>
Â  Â  Â  Â  Â  Â  Â  <Form.Control
Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Enter area"
Â  Â  Â  Â  Â  Â  Â  Â  value={area}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setArea(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  ></Form.Control>
Â  Â  Â  Â  Â  Â  </Form.Group>
Â  Â  Â  Â  Â  </Col>
Â  Â  Â  Â  Â  <Col md={4}>
Â  Â  Â  Â  Â  Â  <Form.Group className="mb-3" controlId="city">
Â  Â  Â  Â  Â  Â  Â  <Form.Label>City</Form.Label>
Â  Â  Â  Â  Â  Â  Â  <Form.Control
Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Enter city"
Â  Â  Â  Â  Â  Â  Â  Â  value={city}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setCity(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  ></Form.Control>
Â  Â  Â  Â  Â  Â  </Form.Group>
Â  Â  Â  Â  Â  </Col>
Â  Â  Â  Â  Â  <Col md={4}>
Â  Â  Â  Â  Â  Â  <Form.Group className="mb-3" controlId="district">
Â  Â  Â  Â  Â  Â  Â  <Form.Label>District</Label>
Â  Â  Â  Â  Â  Â  Â  <Form.Control
Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Enter district"
Â  Â  Â  Â  Â  Â  Â  Â  value={district}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setDistrict(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  ></Form.Control>
Â  Â  Â  Â  Â  Â  </Form.Group>
Â  Â  Â  Â  Â  </Col>
Â  Â  Â  Â  </Row>

Â  Â  Â  Â  <Button disabled={loading || loadingUpload} type="submit" variant="primary" className="w-100 mt-4">
Â  Â  Â  Â  Â  {loading ? 'Submitting Request...' : 'Submit Store Request'}
Â  Â  Â  Â  </Button>
Â  Â  Â  </Form>
Â  Â  </FormContainer>
Â  );
};

export default StoreRequestScreen;
